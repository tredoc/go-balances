// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transfer.sql

package db

import (
	"context"
)

const getAllTransfers = `-- name: GetAllTransfers :many
SELECT id, from_balance_id, to_balance_id, amount FROM transfers
`

func (q *Queries) GetAllTransfers(ctx context.Context) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransfers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromBalanceID,
			&i.ToBalanceID,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_balance_id, to_balance_id, amount FROM transfers
WHERE id = ?
`

func (q *Queries) GetTransfer(ctx context.Context, id uint64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromBalanceID,
		&i.ToBalanceID,
		&i.Amount,
	)
	return i, err
}
